# R scripts for Single Cell mtDNA DNA sequencing
# Colin Clarke's code adapted by Alan Foley Jan 2022
# Sequencing
## Read Mapping
# Added other packages to install
# Adapted to Methods Paper

install.packages("highr")
install.packages("knitr")
install.packages("stringr")
install.packages("selectr")
install.packages("assertthat")
install.packages("dbplyr")
install.packages("cellranger")
install.packages("googlesheets4")
install.packages("rmarkdown")
install.packages("rvest")
install.packages("reprex")
install.packages("readx1")
install.packages("RColorBrewer")
install.packages("scales")
install.packages("xlsx")
install.packages("colorRamps")
install.packages("tidyverse")

library(forcats)
library(tidyr)
library(dplyr)
library(RColorBrewer)
library("tidyverse")
library(scales)
library(xlsx)
library(colorRamps)
library(ggplot2)
library(stringr)

theme_ms <- function(base_size = 10, base_family = "Helvetica") {
  library(grid)
  (theme_bw(base_size = base_size, base_family = base_family) +
      theme(
        text = element_text(color = "black"),
        axis.title = element_text(face = "bold", size = rel(1)),
        plot.title = element_text(face = "bold", size = rel(1)),
        axis.text = element_text(size = rel(1), color = "black"),
        legend.title = element_text(face = "bold"),
        legend.text = element_text(face = "bold"),
        legend.background = element_rect(fill = "transparent"),
        legend.key.size = unit(0.8, "lines"),
        panel.border = element_rect(color = "black", size = 1),
        panel.grid = element_blank()
      ))
}

# create a directory for saving figures
figsdir <- "./figures/"
if (!dir.exists(figsdir)) {
  dir.create(figsdir)
}

tabsdir <- "./tables/"
if (!dir.exists(tabsdir)) {
  dir.create(tabsdir)
}

# function to save figures
saveManuscriptPlot <- function(p, width, height) {
  figfile <- file.path(figsdir, sprintf(
    "%s.png",
    gsub("\\.", "_", deparse(substitute(p)))
  ))
  ggsave(figfile, plot = p, width = width, height = height, units = "in", device = "png")
  
  fill.gradient <- scale_fill_gradientn(
    colors = matlab.like(200),
    trans = "log10"
  )
}
```
# Sequencing
## Read Mapping

mapping_data_unshifted <- read.table(file = "plotting_data/mapping_statistics/mapping_rates.txt")

mapping_data_unshifted <- mapping_data_unshifted %>%
  mutate(
    Filename = V1,
    Unmapped = V2 - V3,
    Duplicates = V4,
    Unique = V3 - V4
  ) %>%
  mutate(sample_name = case_when(
    Filename == "SC-H-K_S4" ~ "SCHP1",
    Filename == "SC-H-M_S7" ~ "SCHP2",
    Filename == "SC-H-O_S8" ~ "SCHP3",
    Filename == "SC-H-P_S9" ~ "SCHP4",
    Filename == "MP-H-R_S5" ~ "MPHP"
  )) %>%
  select(sample_name, Unmapped, Duplicates, Unique)

write.xlsx(x = mapping_data_unshifted, 
           sheetName = "Read Mapping", 
           file = "tables/Supplementary Data.xlsx",
           append = F )

mapping_data_unshifted <- mapping_data_unshifted %>%
  pivot_longer(
    cols = c("Unmapped", "Duplicates", "Unique"),
    names_to = "Variable",
    values_to = "Reads"
  )

mapping_data_unshifted$Variable <- fct_relevel(factor(mapping_data_unshifted$Variable), c("Unmapped", "Duplicates", "Unique"))

scientific <- function(x) {
  ifelse(x == 0, "0", parse(text = gsub("[+]", "", gsub("e", " %*% 10^", scientific_format()(x)))))
}

sample_order <- c("SCLP1","SCLP2","SCLP3","SCHP1","SCHP2","SCHP3","SCHP4","MPLP",
                  "MPHP","MITO100")

mapping_data_unshifted$sample_name <- factor(mapping_data_unshifted$sample_name, 
                                             levels = sample_order)

Fig1_read_mapping <- mapping_data_unshifted %>%
  ggplot(aes(x = sample_name, y = Reads, fill = Variable)) +
  geom_bar(position = "stack", stat = "identity") +
  theme_ms() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  labs(fill = "", y = "# Reads", x = "", title = "Read mapping to the Chinese hamster mtDNA sequence") +
  theme(legend.position = "right") +
  scale_y_continuous(
    expand = c(0, 10000),
    labels = scientific
  ) +
  scale_fill_brewer(palette = "Set1")


saveManuscriptPlot(Fig1_read_mapping, 10, 5)
Fig1_read_mapping
```




## Average sample coverage

```{r}
average_cell_line_coverage <- read.table("plotting_data/mapping_statistics/coverage/sample_depth", header = F)

average_cell_line_coverage <- average_cell_line_coverage %>%
  mutate(
    Filename = as.factor(V1),
    average_coverage = V2
  ) %>%
  mutate(sample_name = case_when(
    Filename == "SC-H-K_S4" ~ "SCHP1",
    Filename == "SC-H-M_S7" ~ "SCHP2",
    Filename == "SC-H-O_S8" ~ "SCHP3",
    Filename == "SC-H-P_S9" ~ "SCHP4",
    Filename == "MP-H-R_S5" ~ "MPHP"
  )) %>%
  select(sample_name, average_coverage)

write.xlsx(x = average_cell_line_coverage, 
           sheetName = "Average Sample Coverage", 
           file = "tables/Supplementary Data.xlsx",
           append = T )

average_cell_line_coverage$sample_name <- factor(average_cell_line_coverage$sample_name, 
                                             levels = sample_order)

Fig2_average_sample_coverage <- average_cell_line_coverage %>%
  ggplot(aes(x = sample_name, y = average_coverage)) +
  geom_bar(stat = "identity", fill = "#377EB8") +
  labs(x = "", y = "Depth of Coverage", title = "Average sequencing depth for each sample") +
  scale_y_continuous(expand = c(0, 100)) +
  theme_ms() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1))

saveManuscriptPlot(Fig2_average_sample_coverage, 10, 5)
Fig2_average_sample_coverage
```






## Perbase coverage
# needed to delete mito samples because they have 0kb


```{r}
perbase_cell_files_unshifted <- list.files("plotting_data/mapping_statistics/coverage/perbase_coverage/unshifted/", full.names = T)

perbase_cell_files_shifted <- list.files("plotting_data/mapping_statistics/coverage/perbase_coverage/shifted/", full.names = T)


perbase_unshifted <- do.call("rbind", lapply(perbase_cell_files_unshifted, function(fn) {
  data.frame(Filename = fn, read.table(fn))
})) %>%
  select(Filename, V2, V3) %>%
  mutate(
    perbase = V3,
    position = V2
  ) %>%
  mutate(Filename = str_remove(Filename, "plotting_data/mapping_statistics/coverage/perbase_coverage/unshifted/")) %>%
  mutate(Filename = str_remove(Filename, ".perbase.coverage")) %>%
  mutate(sample_name = case_when(
    Filename == "/SC-H-K_S4" ~ "SCHP1",
    Filename == "/SC-H-M_S7" ~ "SCHP2",
    Filename == "/SC-H-O_S8" ~ "SCHP3",
    Filename == "/SC-H-P_S9" ~ "SCHP4",
    Filename == "/MP-H-R_S5" ~ "MPHP"
  )) %>%
  select(sample_name, position, perbase)

perbase_unshifted$sample_name <- factor(perbase_unshifted$sample_name, 
                                             levels = sample_order)

perbase_shifted <- do.call("rbind", lapply(perbase_cell_files_shifted, function(fn) {
  data.frame(Filename = fn, read.table(fn))
})) %>%
  select(Filename, V2, V3) %>%
  mutate(
    perbase = V3,
    position = V2
  ) %>%
  mutate(Filename = str_remove(Filename, "plotting_data/mapping_statistics/coverage/perbase_coverage/shifted/")) %>%
  mutate(Filename = str_remove(Filename, ".perbase.coverage")) %>%
  mutate(sample_name = case_when(
    Filename == "/SC-H-K_S4" ~ "SCHP1",
    Filename == "/SC-H-M_S7" ~ "SCHP2",
    Filename == "/SC-H-O_S8" ~ "SCHP3",
    Filename == "/SC-H-P_S9" ~ "SCHP4",
    Filename == "/MP-H-R_S5" ~ "MPHP"
  )) %>%
  select(sample_name, position, perbase)

perbase_shifted$sample_name <- factor(perbase_shifted$sample_name, 
                                             levels = sample_order)

Fig3_unshifted_average_perbase_coverage <- perbase_unshifted %>%
  group_by(position) %>%
  summarise(mean_cov = mean(perbase)) %>%
  ggplot(aes(x = position, y = mean_cov)) +
  geom_line(color = "#377EB8") +
  ylim(0, 2000) +
  labs(y = "Depth of Coverage", x = "mtDNA position (bp)", title = "Average perbase coverage for unshifted mtDNA sequence") +
  theme_ms()

Fig4_shifted_average_perbase_coverage <- perbase_shifted %>%
  group_by(position) %>%
  summarise(mean_cov = mean(perbase)) %>%
  ggplot(aes(x = position, y = mean_cov)) +
  geom_line(color = "#377EB8") +
  ylim(0, 2000) +
  labs(y = "Depth of Coverage", x = "mtDNA position (bp)", title = "Average perbase coverage for shifted mtDNA sequence") +
  theme_ms()

Fig5_shifted_perbase_coverage_all_samples <- perbase_unshifted %>%
  ggplot(aes(x = position, y = perbase)) +
  geom_line(color = "#377EB8") +
  facet_wrap(~sample_name, ncol = 3) +
  labs(y = "Depth of Coverage", x = "mtDNA position (bp)", title = "Perbase coverage for unshifted mtDNA sequence") +
  theme_ms()

Fig6_shifted_perbase_coverage_all_samples <- perbase_shifted %>%
  ggplot(aes(x = position, y = perbase)) +
  geom_line(color = "#377EB8") +
  facet_wrap(~sample_name, ncol = 3) +
  labs(y = "Depth of Coverage", x = "mtDNA position (bp)", title = "Perbase coverage for shifted mtDNA sequence") +
  theme_ms()

saveManuscriptPlot(Fig3_unshifted_average_perbase_coverage, 10, 5)
Fig3_unshifted_average_perbase_coverage
saveManuscriptPlot(Fig4_shifted_average_perbase_coverage, 10, 5)
Fig4_shifted_average_perbase_coverage
```

```{r fig.height=15, fig.width=10}
saveManuscriptPlot(Fig5_shifted_perbase_coverage_all_samples, 10, 10)

saveManuscriptPlot(Fig6_shifted_perbase_coverage_all_samples, 10, 10)
Fig5_shifted_perbase_coverage_all_samples
Fig6_shifted_perbase_coverage_all_samples

```



# Variant analysis
## Import
# change file path names
# changed file name change to include a "/" not sure why
# removed sample_name_order may need later though
```{r}
variant_tables <- list.files("results_output/final_results/table/", full.names = T)

variants <- do.call("rbind", lapply(variant_tables, function(fn) {
  data.frame(Filename = fn, read.table(fn, sep = "\t", header = T))
})) %>%
  filter(POS != "POS") %>%
  mutate(
    variant_type = sapply(str_split(as.character(ANN), "\\|"), function(x) x[2]),
    impact = sapply(str_split(as.character(ANN), "\\|"), function(x) x[3])
  ) %>%
  select(-ANN) %>%
  mutate(POS = as.numeric(POS)) %>%
  mutate(gene = case_when(
    POS >= 1 & POS <= 69 ~ "tRNA-Phe",
    POS >= 71 & POS <= 1023 ~ "s-rRNA",
    POS >= 1024 & POS <= 1095 ~ "tRNA-Val",
    POS >= 1096 & POS <= 2697 ~ "l-rRNA",
    POS >= 2658 & POS <= 2732 ~ "tRNA-Leu_1",
    POS >= 2733 & POS <= 3687 ~ "ND1",
    POS >= 3688 & POS <= 3756 ~ "tRNA-Ile",
    POS >= 3754 & POS <= 3824 ~ "tRNA-Gln",
    POS >= 3829 & POS <= 3897 ~ "tRNA-Met",
    POS >= 3898 & POS <= 4930 ~ "ND2",
    POS >= 4931 & POS <= 4997 ~ "tRNA-Trp",
    POS >= 5000 & POS <= 5069 ~ "tRNA-Ala",
    POS >= 5072 & POS <= 5142 ~ "tRNA-Asn",
    POS >= 5174 & POS <= 5241 ~ "tRNA-Cys",
    POS >= 5241 & POS <= 5308 ~ "tRNA-Tyr",
    POS >= 5310 & POS <= 6854 ~ "COX1",
    POS >= 6852 & POS <= 6920 ~ "tRNA-Ser_1",
    POS >= 6924 & POS <= 6992 ~ "tRNA-Asp",
    POS >= 6994 & POS <= 7677 ~ "COX2",
    POS >= 7681 & POS <= 7744 ~ "tRNA-Lys",
    POS >= 7746 & POS <= 7949 ~ "ATP8",
    POS >= 7907 & POS <= 8587 ~ "ATP6",
    POS >= 8587 & POS <= 9370 ~ "COX3",
    POS >= 9371 & POS <= 9438 ~ "tRNA-Gly",
    POS >= 9439 & POS <= 9786 ~ "ND3",
    POS >= 9788 & POS <= 9855 ~ "tRNA-Arg",
    POS >= 9857 & POS <= 10153 ~ "ND4L",
    POS >= 10147 & POS <= 11524 ~ "ND4",
    POS >= 11525 & POS <= 11592 ~ "tRNA-His",
    POS >= 11593 & POS <= 11651 ~ "tRNA-Ser_2",
    POS >= 11651 & POS <= 11720 ~ "tRNA-Leu_2",
    POS >= 11721 & POS <= 13541 ~ "ND5",
    POS >= 13525 & POS <= 14049 ~ "ND6",
    POS >= 14050 & POS <= 14118 ~ "tRNA-Glu",
    POS >= 14123 & POS <= 15265 ~ "CYTB",
    POS >= 15267 & POS <= 15333 ~ "tRNA-Thr",
    POS >= 15337 & POS <= 15403 ~ "tRNA-Pro",
    POS >= 15404 & POS <= 16283 ~ "D-loop"
  )) %>%
  mutate(base_change = paste(REF, ALT, sep = ">")) %>%
  mutate(var_type = case_when(
    str_length(base_change) == 3 ~ "SNP",
    str_length(base_change) > 3 ~ "INDEL"
  )) %>%
  mutate(Filename = str_remove(Filename, "results_output/final_results/table/")) %>%
  mutate(Filename = str_remove(Filename, ".table")) %>%
  mutate(sample_name = case_when(
    Filename == "/SC-H-K_S4" ~ "SCHP1",
    Filename == "/SC-H-M_S7" ~ "SCHP2",
    Filename == "/SC-H-O_S8" ~ "SCHP3",
    Filename == "/SC-H-P_S9" ~ "SCHP4",
    Filename == "/MP-H-R_S5" ~ "MPHP"
  ))

variants$sample_name <- factor(variants$sample_name, levels = sort(unique(variants$sample_name)))
```


## Variants per sample
# removed the sample_name_order in earlier code. may need to change this
# otherwise no changes made

```{r}

Fig7_variants_per_sample <- variants %>%
  group_by(sample_name) %>%
  count(var_type) %>%
  ggplot(aes(x = sample_name, y = n, fill = var_type)) +
  geom_bar(position = "stack", stat = "identity") +
  labs(y = "# Variants", x = "", fill = "", title = "Variants per sample") +
  theme(legend.position = "botton") +
  theme_ms() +
  scale_fill_brewer(palette = "Set1", ) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1))

saveManuscriptPlot(Fig7_variants_per_sample,10,5)
Fig7_variants_per_sample
```


## Variants per gene
# no changes made

```{r}
Fig8_variants_per_sample <- variants %>%
  group_by(gene) %>%
  count(var_type) %>%
  ggplot(aes(x = gene, y = n, fill = var_type)) +
  geom_bar(position = "stack", stat = "identity") +
  labs(y = "# Variants", x = "", fill = "",title = "Variants per gene" ) +
  theme(legend.position = "botton") +
  theme_ms() +
  scale_y_continuous(expand = c(0, 0)) +
  lims(y = c(0, 33)) +
  scale_fill_brewer(palette = "Set1", ) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1))

saveManuscriptPlot(Fig8_variants_per_sample, 10, 5)
Fig8_variants_per_sample
```


## Allele frequency distribution
# no changes made

```{r}
Fig9_allele_frequency_distribution <- variants %>%
  ggplot(aes(x = as.numeric(AF) * 100)) +
  geom_histogram(bins = 100, fill = "#377EB8", color = "black") +
  labs(x = "Allele Frequency (%)", y = "# mtDNA variants", 
       title = "Distribtion of all allele frequencies across all samples",
       subtitle= "minimum allele frequency called >= 2%") +
  theme_ms()

saveManuscriptPlot(Fig9_allele_frequency_distribution, 10, 5)
Fig9_allele_frequency_distribution


# probably need to redo this when i've redone snpEff
# so far no changes made
# removed y limit
# still getting na values?
```{r}
Fig10_predicted_impact_per_sample <- variants %>%
  select(sample_name, variant_type) %>%
  count(sample_name, variant_type) %>%
  ggplot(aes(x = sample_name, y = n, fill = variant_type)) +
  geom_bar(position = "stack", stat = "identity") +
  labs(y = "# Variants", x = "", fill = "", title="snpEff predicted impact of mtDNA variants per sample") +
  theme_ms() +
  scale_fill_brewer(palette = "Set1", ) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1,),legend.position = "bottom") 
saveManuscriptPlot(Fig10_predicted_impact_per_sample, 10, 5)
Fig10_predicted_impact_per_sample
```


# no changes made. but probably have to redo this the same as fig 10
```{r}
Fig11_predicted_impact_per_gene <- variants %>%
  select(gene, variant_type) %>%
  count(gene, variant_type) %>%
  ggplot(aes(x = gene, y = n, fill = variant_type)) +
  geom_bar(position = "stack", stat = "identity") +
  labs(y = "# Variants", x = "", fill = "", title="snpEff predicted impact of mtDNA variants per gene") +
  theme_ms() +
  scale_y_continuous(expand = c(0, 1)) +
  scale_fill_brewer(palette = "Set1", ) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom")

saveManuscriptPlot(Fig11_predicted_impact_per_gene, 10, 5)
Fig11_predicted_impact_per_gene



# Variant heatmaps
## Base changes
# changed n to 20



```{r fig.height=7, fig.width=14}
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(20, "Set1"))(nb.cols)
Fig12_base_change_grid <- variants %>%
  select(sample_name, POS, base_change, AF) %>%
  ggplot(aes(x = as.factor(POS), y = as.factor(sample_name), fill = as.factor(base_change))) +
  geom_raster(hjust = 0, vjust = 0) +
  scale_fill_manual(values = mycolors) +
  theme(text = element_text(size = 12)) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = -0.5, hjust = 1.25),
    axis.text.y = element_text(vjust = 2)
  ) +
  labs(x = "mtDNA position (nt)", y = "", fill = "Base \nChange",title="Variant position base changes") +
  scale_x_discrete(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0))
saveManuscriptPlot(Fig12_base_change_grid, 14,7)
Fig12_base_change_grid

```

## Allele frequency
# no changes made

```{r fig.height=7, fig.width=14}
fill.gradient <- scale_fill_gradientn(
    colors = matlab.like(200),
    trans = "log10"
  )

Fig13_allele_frequency_grid <- variants %>%
  select(sample_name, POS, base_change, AF) %>%
  ggplot(aes(x = as.factor(POS), y = as.factor(sample_name), fill = as.numeric(AF) * 100)) +
  geom_raster(hjust = 0, vjust = 0) +
  fill.gradient +
  theme(text = element_text(size = 12)) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = -0.5, hjust = 1.25),
    axis.text.y = element_text(vjust = 2)
  ) +
  labs(x = "mtDNA position (nt)", y = "", fill = "Allele \nFrequency (%)") +
  scale_x_discrete(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0))
saveManuscriptPlot(Fig13_allele_frequency_grid, 14,7)
Fig13_allele_frequency_grid
```


## Impact

```{r fig.height=7, fig.width=14}
Fig14_variant_impact_grid <- variants %>%
  select(sample_name, POS, base_change, AF, variant_type) %>%
  ggplot(aes(x = as.factor(POS), y = as.factor(sample_name), fill = variant_type)) +
  geom_raster(hjust = 0, vjust = 0) +
  scale_fill_manual(values = mycolors) +
  theme(text = element_text(size = 12)) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = -0.5, hjust = 1.25),
    axis.text.y = element_text(vjust = 2),
    legend.position = "bottom"
  ) +
  labs(x = "mtDNA position (nt)", y = "", fill = "") +
  scale_x_discrete(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0))
saveManuscriptPlot(Fig14_variant_impact_grid, 14,7)
Fig14_variant_impact_grid
```


# Supplementary Variant Tables
# havent run these yet. may try to another time

```{r}
allele_freq_table <- variants %>%
  select(sample_name, POS, AF, gene) %>%
  arrange(POS) %>%
  pivot_wider(names_from = c(POS, gene), values_from = AF, values_fill = " ")

base_change_table <- variants %>%
  select(sample_name, POS, base_change, gene) %>%
  arrange(POS) %>%
  pivot_wider(names_from = c(POS, gene), values_from = base_change, values_fill = " ")

variant_impact_table <- variants %>%
  select(sample_name, POS, variant_type, gene) %>%
  arrange(POS) %>%
  pivot_wider(names_from = c(POS, gene), values_from = variant_type, values_fill = " ")


write.xlsx(x = allele_freq_table, sheetName = "Variant allele Frequency", 
           file = "tables/Supplementary Data.xlsx", 
           append = T )
write.xlsx(x = base_change_table, 
           sheetName = "Variant base chanes", 
           file = "tables/Supplementary Data.xlsx",
           append = T)
write.xlsx(x = variant_impact_table, 
           sheetName = "Variant impact table", 
           file = "tables/Supplementary Data.xlsx",
           append = T)
```
